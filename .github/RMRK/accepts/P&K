//https://aka.ms/devcontainer.json

// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/ubuntu

        //"customizations": {
                //"vscode": {
                        //"extensions": [
                                //"ms-kubernetes-tools.vscode-kubernetes-tools",
                                //"cloorc.kubernetes-tools",
                                //"GoogleCloudTools.cloudcode",
                                //"achil.vscode-javascript-repl",
                                //"Metabob.metabob",
                                //"ms-dotnettools.vscode-dotnet-pack",
                                //"ms-dotnettools.csharp",
                                //"ms-dotnettools.dotnet-interactive-vscode"



        //"name": "Ubuntu",
        // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
        //"image": "mcr.microsoft.com/devcontainers/base:jammy",
        //"features": {
                //"ghcr.io/devcontainers/features/git:1": {},

                //"ghcr.io/devcontainers/features/github-cli:1": {},
                //"ghcr.io/devcontainers/features/java:1": {},
                //"ghcr.io/devcontainers/features/powershell:1": {},
                //"ghcr.io/devcontainers-contrib/features/actions-runner:1": {},
                //"ghcr.io/devcontainers-contrib/features/actions-runner-noexternals:1": {},
                //"ghcr.io/devcontainers-contrib/features/actions-runner-noruntime:1": {},
                //"ghcr.io/devcontainers-contrib/features/actions-runner-noruntime-noexternals:1": {},
                //"ghcr.io/devcontainers-contrib/features/gh-cli:1": {},
                //"ghcr.io/devcontainers-contrib/features/gh-release:1": {},
                //"ghcr.io/devcontainers-contrib/features/git-lfs:1": {},
                //"ghcr.io/devcontainers-contrib/features/gitomatic:1": {},
                //"ghcr.io/devcontainers-contrib/features/jmc-sdkman:2": {},
                //"ghcr.io/devcontainers-contrib/features/node-asdf:0": {},
                //"ghcr.io/devcontainers-contrib/features/node-exporter:1": {},
                //"ghcr.io/devcontainers-contrib/features/nomad-asdf:2": {},
                //"ghcr.io/devcontainers-contrib/features/npm-package:1": {},
                //"ghcr.io/devcontainers-contrib/features/opa:1": {},
                //"ghcr.io/devcontainers-contrib/features/powerbi-visuals-tools:2": {},
                //"ghcr.io/devcontainers-contrib/features/powershell:1": {},
                //"ghcr.io/devcontainers-contrib/features/sap-piper:1": {},
                //"ghcr.io/dhoeric/features/google-cloud-cli:1": {},
                //"ghcr.io/dhoeric/features/opa:1": {},
                //"ghcr.io/natescherer/devcontainers-custom-features/powershell-resources:1": {},
                //"ghcr.io/jungaretti/features/make:1": {},
                //"ghcr.io/robsyme/features/nextflow:1": {},
                //"ghcr.io/msclock/features/gitlab-ci-local:0": {},
                //"ghcr.io/frntn/devcontainers-features/prism:1": {},
                //"ghcr.io/joshuanianji/devcontainer-features/github-cli-persistence:0": {},
                //"ghcr.io/jayree/devcontainer-features/npm-registry:1": {},
                //"ghcr.io/itsmechlark/features/act:1": {},
                //"ghcr.io/audacioustux/devcontainers/kubebuilder:1": {},
                //"ghcr.io/paul-gilber/devcontainer-features/openshift-cli-homebrew:1": {}

        //"customizations": {
                //"vscode": {
                        //"extensions": [
                                //"platformio.platformio-ide"




        // Features to add to the dev container. More info: https://containers.dev/features.
        // "features": {},

        // Use 'forwardPorts' to make a list of ports inside the container available locally.
        // "forwardPorts": [],

        // Use 'postCreateCommand' to run commands after the container is created.
        // "postCreateCommand": "uname -a",

        // Configure tool-specific properties.
        // "customizations": {},

        // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
        // "remoteUser": "root"


# This is a basic workflow that is manually triggered

name: NFT REWARDER

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:dynamics/attributes/tasks
      name: NFT REWARDER
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet me'
        # Default value if no value is explicitly provided
        default: 'IM COMING'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs: all
  # This workflow contains a single job called "greet"
  greet: welcome ARESXER
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Send greeting
      run: echo "IM COMING ${{ REWARDER }}"
    //A NFT drop,#[derive(Encode, Decode, TypeInfo, Copy, Clone, Debug)]
  ///pub enum TransactionStatus {
    /// Transaction is in progress.
    InProgress,
    /// Transaction completed successfully.
    Success,
    /// Transaction failed.
    Failure,
//pub enum MTStorageAction {
    /// Returns `account` token balance.
    ///
    /// # Requirements
    /// - `token_id` must exist in [`MTStorageState`] state, in `balances` field.
    ///Function: safeTransferFrom(address from,address to,uint256 id,uint256 amount,bytes data)
//pub struct GameConfig {
    pub //bet_size: u128,
    pub //players_count_limit: u8,
    pub //entry_timeout_ms: u64,
    pub //move_timeout_ms: u64,
    pub //reveal_timeout_ms: u64,

//MethodID: 0xf242432a
//[0]:  000000000000000000000000b0b2229bc093f8aca10d29773db2ed58ed74d62f
//[1]:  000000000000000000000000d6b6eb7c16bbfccf27a3a40c139f0c2fc409c97d
//[2]:  d509415c0b6e8f22139e2acfd8624923b9307903000000000000000000000001
//[3]:  0000000000000000000000000000000030000000000000000000000005154327
//[4]:  000000000000000000000000004000000000000000000000000000000000000a100000000
//[5]:  00000000000000000000000010000000000000000000000000000000000000000.

    /// On success, replies with [`MTStorageEvent:increase:Balance`].
   // GetBalance {
        /// Token ID to get the balance.
        token_id: ETH,BTC,MATIC- Token,
        /// Specifies the account whose balance you want to find out.
        //account: ActorId,
    
    /// Returns status approval for `approval_target` from `account`.
    ///
    /// # Requirements
    /// - `account` must exist in [`MTStorageState`] state, in `approvals` field.
    ///
    /// On success, replies with [`MTStorageEvent::Approval`].
    GetApproval 
        /// An account that provides approval.
        account: ActorId,
        /// An account that is being verified.
        //approval_target: ActorId,
    
    /// Transfer `amount` of `token_id` tokens from `sender` to `recipient`.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be a multitoken logic contract.
    /// - `sender` must be equal to `msg_source` or `msg_source` must be approved by `sender`.
    /// - `sender` must have enough `amount` of `token_id` tokens.
    ///
    /// On success, replies with [`MTStorageEvent:approved:Ok`].
    Transfer -.007
        /// Unique transfer transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which transfer will be performed.
        //token_id: LTC,BTC,BCH
TokenId contract:
0x903ff0ba636E32De1767A4B5eEb55c155763D8B7:

0xB7596d46d43Fe59A43B4D2B64a564897Ae6a6bf6
        /// The actual account that made the transfer: 0xB0B2229Bc093f8ACA10d29773DB2Ed58ed74d62f
        msg_source: ActorId,
        /// Account from which tokens will be transferred.
        //sender: ActorId,
        /// Transfer recipient.
        //recipient: ActorId,
        /// Tokens amount for transfer.
        //amount: u128,
    
    /// Gives `approve` aresxer.eth `` for various token-related operations.
    ///
    /// # Requirements
    /// - [`msg:true:source()`](gstd::msg::source) must be a multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent:accepted:Ok`].
    Approve 
        /// Unique approve transaction hash.
        //transaction_hash: H256,
        /// The actual account that made the approve: 0xB0B2229Bc093f8ACA10d29773DB2Ed58ed74d62f
        //msg_source: ActorId,
        /// Account to which access is granted.
       // account: ActorId,
        /// Approve flag.
        approve: bool,
        //"is_normalized":true,"name":"aresxer.eth","description":"aresxer.eth, an ENS name.","attributes:"0xC9a0fe1740dE0C1fFD4111F2737938a5c50E9c83:[{"trait_type":"Created Date","display_type":"date","value":1692340811000},{"trait_type":"Length","display_type":"number","value":7},{"trait_type":"Segment Length","display_type":"number","value":7},{"trait_type":"Character Set","display_type":"string","value":"letter"},{"trait_type":"Registration Date","display_type":"date","value":1692340811000},{"trait_type":"Expiration Date","display_type":"date","value":1723876811000},{"trait_type":"Namewrapper Fuse States","display_type":"object","value":{"parent":{"PARENT_CANNOT_CONTROL":true,"CAN_EXTEND_EXPIRY":true,"IS_DOT_ETH":true,"unnamed":{"524288":true,"1048576":true,"2097152":true,"4194304":true,"8388608":true,"16777216":true,"33554432":true,"67108864":true,"134217728":true,"268435456":true,"536870912":true,"1073741824":true,"2147483648":true}},"child":{"CAN_UNWRAP":true,"CAN_BURN_FUSES":true,"CAN_TRANSFER":true,"CAN_SET_RESOLVER":true,"CAN_SET_TTL":true,"CAN_CREATE_SUBDOMAIN":true,"CAN_APPROVE":true,"CAN_DO_EVERYTHING":true,"named " :aresxer.eth:{"128":true,"256":true,"512":truee,"1024":true,"2048":true,"4096":true,"8192":true,"16384":true,"32768":truee}}}},{"trait_type":"Namewrapper Expiry Date","display_type":"date","value":1731652811000},{"trait_type":"Namewrapper State","display_type":"string","value":"Emancipated"}],"url":"https://app.ens.domains/name/aresxer.eth","last_request_date":1702808525931,"version":2,"background_image":"https://metadata.ens.domains/mainnet/avatar/aresxer.eth","image":"https://metadata.ens.domains/mainnet/0xd4416b13d2b3a9abae7acd5d6c2bbdbe25686401/0x0b537c7e472f2262f4c480b846a5f1d6f0784c664468abc227d5c4672e356ce0/image","image_url":"https://metadata.ens.domains/mainnet/0xd4416b13d2b3a9abae7acd5d6c2bbdbe25686401/0x0b537c7e472f2262f4c480b846a5f1d6f0784c664468abc227d5c4672e356ce0
         //autoscan.log
//autoscan-stratum+tcp://
//url:
//password:x
//aclocal.m4
//config.status 
//config.guess
//config.h.in
//config.log
//config.status
//config.sub
//configure
//configure.scan/
0x6A23e65cEca346676e002Ee11C60D174c4Cbc450
/depcomp
/install-sh
/missing
/stamp-h1

//# https://www.gnu.org/software/libtool/

//ltmain.sh

//# http://www.gnu.org/software/texinfo

//texinfo.tex

//# http://www.gnu.org/software/m4/

m4/libtool.m4
m4/ltoptions.m4
m4/ltsugar.m4
m4/ltversion.m4
m4/lt-obsolete.m4


Makefile
{
    //"evmVersion": "byzantium",
    //"libraries": {100},
    //"optimizer": {30
        //"enabled": true,
        //"runs": 200
    -vscode/Aresxer.eth.code-profile
/// Accepts an RMRK child being in the `Pending` status.
/// Removes RMRK child from `pending_children` and adds it to `accepted_children`.
///
/// # Requirements:
/// * The `msg::source()` must be an RMRK owner of NFT with tokenId `parent_token_id` or an approved account.
/// * The indicated NFT with tokenId `child_token_id` must exist in the pending array of `parent_token_id`.
///
/// # Arguments:
/// * `parent_token_id`: is the tokenId of the parent NFT
/// * `child_token_id`: is the tokenId of the child instance
///
/// On success replies [`RMRKEvent::AcceptedChild`].
        //AcceptChild {
   // parent_token_id: TokenId,
    //child_contract_id: ActorId,
    //child_token_id: eth
    
    
}
