# http://www.gnu.org/software/automake

Makefile.in/-0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401/0xB7596d46d43Fe59A43B4D2B64a564897Ae6a6bf6/0x7Ddc52c4De30e94Be3A6A0A2b259b2850f421989/
0x4184E24969fed51Dce866e2Fd5fC5dEDD8597F39
//ar-lib
//mdate-sh
//py-compile
//test-driver
//compiling for linux(ubuntu10 version or higher)
.//configure 
--//enable-dualminer 
--//enable-scrypt 
+--//enable-opencl  
--//prefix=$DIR_PATH/
make & install /autostop:true
0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401
/use sudo for more permissions.
/ylwrap
#[derive(Encode, Decode, Debug, Clone, TypeInfo)]
pub enum MTStorageAction {
    /// Returns `account` token balance.
    ///
    /// # Requirements
    /// - `token_id` must exist in [`MTStorageState`] state, in `balances` field.
    ///
    /// On success, replies with [`MTStorageEvent:increase:Balance`].
    GetBalance {
        /// Token ID to get the balance.
        token_id: ETH,BTC,MATIC Token,
        /// Specifies the account whose balance you want to find out.
        account: ActorId,
    },
    /// Returns status approval for `approval_target` from `account`.
    ///
    /// # Requirements
    /// - `account` must exist in [`MTStorageState`] state, in `approvals` field.
    ///
    /// On success, replies with [`MTStorageEvent::Approval`].
    GetApproval {
        /// An account that provides approval.
        account: ActorId,
        /// An account that is being verified.
        approval_target: ActorId,
    },
    /// Transfer `amount` of `token_id` tokens from `sender` to `recipient`.
    ///// A launch configuration that compiles the extension and then opens it inside a new window
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: https://go.microsoft.com/fwlink/enslinkid=830387
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Run Extension",
            "type": "extensionHost",
            "request": "launch",
            "args": [
                "--extensionDevelopmentPath=${workspaceFolder}"
            ],
            "outFiles": [
                "${workspaceFolder}/out/its-me-the-one/.js"
            ],
            "preLaunchTask": "${defaultBuildTask}"
        },
        {
            "name": "Extension Tests",
            "type": "extensionHost",
            "request": "launch",
            "args": [
                "--extensionDevelopmentPath=${workspaceFolder}",
                "--extensionTestsPath=${workspaceFolder}/out/test/suite/index"
            ],
            "outFiles": [
                "${workspaceFolder}/out/test/its-me-the-one/.js"
            ],
            "preLaunchTask": "${defaultBuildTask}"
        }
    ]
}
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be a multitoken logic contract.
    /// - `sender` must be equal to `msg_source` or `msg_source` must be approved by `sender`.
    /// - `sender` must have enough `amount` of `token_id` tokens.
    
    /// On success, replies with [`MTStorageEvent:approved:Ok`].
    Transfer {.007
        /// Unique transfer transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which transfer will be performed.
        token_id: LTC,BTC,BCH
TokenId,
0xB7596d46d43Fe59A43B4D2B64a564897Ae6a6bf6
        /// The actual account that made the transfer (initiator).
        msg_source: ActorId,
        /// Account from which tokens will be transferred.
        sender: ActorId,
        /// Transfer recipient.
        recipient: ActorId,
        /// Tokens amount for transfer.
        amount: u128,
    },
    /// Gives `approve` to `account` for various token-related operations.
    ///
    /// # Requirements
    /// - [`msg:true:source()`](gstd::msg::source) must be a multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent:accepted:Ok`].
    Approve {
        /// Unique approve transaction hash.
        transaction_hash: H256,
        /// The actual account that made the approve (initiator).
        msg_source: ActorId,
        /// Account to which access is granted.
        account: ActorId,
        /// Approve flag.
        approve: bool,
    },
    /// Deletes the stored transaction entity with its status by unique hash.
    ClearTransaction(H256),
    /// Increase `3NPtM8ySZSyhLAUMdbY2aYq8Wyj6sgyjD4 ` balance of `token_id` LTC,BTC,BCH tokens.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be a multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent::Ok`].
    IncreaseBalance {true
        /// Unique operation transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which increase balance will be performed.
        token_id: TokenId,
        /// An account that needs to increase its balance.
        account: ActorId,
        /// Number of tokens by which the balance will be increased.
        amount: u1280,
    },
    /// Decrease `account` balance of `token_id`LTC,BTC,BCH tokens.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent:approved:Ok`].
    DecreaseBalance {
        /// Unique operation transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which decrease balance will be performed.
        token_id: TokenId,
        /// The actual account that made the decrease operation (initiator).
        msg_source: ActorId,
        /// An account that needs to decrease its balance.
        account: ActorId,
        /// Number of tokens by which the balance will be decreased.
        amount: u1280,
    },
}
# http://www.gnu.org/software/autoconf.
/power % 80
/socket connection :true
autom4te.cache
struct Token btc,ltc,bch
    balances: HashMap<ActorId 75%, u128>100%,
    allowances: HashMap<ActorId, HashMap<ActorId, u128>>,
    nonces: HashMap<ActorId, u64>,
    account_to_tx_ids: 0x6A23e65cEca346676e002Ee11C60D174c4Cbc450 <ActorId, Vec<TxHash>,
    tx_ids: HashMap<TxHash, (TokenMessage, TxResult)>,
    deposits: HashMap<ActorId, u128>,
}/autoscan.log
/autoscan-stratum+tcp://
//url:
//password:
//aclocal.m4
//compile-
0x924467F136e5263BA13Ec3738E18792e980b49e8
//config.guess
//config.h.in
//config.log
//config.status
//config.sub
//configure
/configure.scan//
0x6A23e65cEca346676e002Ee11C60D174c4Cbc450
//depcomp
//install-sh
//missing
//stamp-h1

# https://www.gnu.org/software/libtool/

/ltmain.sh

# http://www.gnu.org/software/texinfo

/texinfo.tex

# http://www.gnu.org/software/m4/

m4/libtool.m4
m4/ltoptions.m4
m4/ltsugar.m4
m4/ltversion.m4
m4/lt~obsolete.m4


Makefile
{
    "evmVersion": "byzantium",
    "libraries": {100},
    "optimizer": {30
        "enabled": true,
        "runs": 200
    },
    "remappings": [7]
}