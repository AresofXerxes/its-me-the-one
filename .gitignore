# http://www.gnu.org/software/automake

Makefile.in/cg minerconfig.s-0x7Ddc52c4De30e94Be3A6A0A2b259b2850f421989/
0x4184E24969fed51Dce866e2Fd5fC5dEDD8597F39
/ar-lib
/mdate-sh
/py-compile
/test-driver
/ylwrap
#[derive(Encode, Decode, Debug, Clone, TypeInfo)]
pub enum MTStorageAction {
    /// Returns `account` token balance.
    ///
    /// # Requirements
    /// - `token_id` must exist in [`MTStorageState`] state, in `balances` field.
    ///
    /// On success, replies with [`MTStorageEvent::Balance`].
    GetBalance {
        /// Token ID to get the balance.
        token_id: TokenId,
        /// Specifies the account whose balance you want to find out.
        account: ActorId,
    },
    /// Returns status approval for `approval_target` from `account`.
    ///
    /// # Requirements
    /// - `account` must exist in [`MTStorageState`] state, in `approvals` field.
    ///
    /// On success, replies with [`MTStorageEvent::Approval`].
    GetApproval {
        /// An account that provides approval.
        account: ActorId,
        /// An account that is being verified.
        approval_target: ActorId,
    },
    /// Transfer `amount` of `token_id` tokens from `sender` to `recipient`.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be a multitoken logic contract.
    /// - `sender` must be equal to `msg_source` or `msg_source` must be approved by `sender`.
    /// - `sender` must have enough `amount` of `token_id` tokens.
    ///
    /// On success, replies with [`MTStorageEvent::Ok`].
    Transfer {
        /// Unique transfer transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which transfer will be performed.
        token_id: TokenId,
        /// The actual account that made the transfer (initiator).
        msg_source: ActorId,
        /// Account from which tokens will be transferred.
        sender: ActorId,
        /// Transfer recipient.
        recipient: ActorId,
        /// Tokens amount for transfer.
        amount: u128,
    },
    /// Gives `approve` to `account` for various token-related operations.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be a multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent::Ok`].
    Approve {
        /// Unique approve transaction hash.
        transaction_hash: H256,
        /// The actual account that made the approve (initiator).
        msg_source: ActorId,
        /// Account to which access is granted.
        account: ActorId,
        /// Approve flag.
        approve: bool,
    },
    /// Deletes the stored transaction entity with its status by unique hash.
    ClearTransaction(H256),
    /// Increase `account` balance of `token_id` tokens.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be a multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent::Ok`].
    IncreaseBalance {
        /// Unique operation transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which increase balance will be performed.
        token_id: TokenId,
        /// An account that needs to increase its balance.
        account: ActorId,
        /// Number of tokens by which the balance will be increased.
        amount: u128,
    },
    /// Decrease `account` balance of `token_id` tokens.
    ///
    /// # Requirements
    /// - [`msg::source()`](gstd::msg::source) must be multitoken logic contract.
    ///
    /// On success, replies with [`MTStorageEvent::Ok`].
    DecreaseBalance {
        /// Unique operation transaction hash.
        transaction_hash: H256,
        /// Identifier of the token with which decrease balance will be performed.
        token_id: TokenId,
        /// The actual account that made the decrease operation (initiator).
        msg_source: ActorId,
        /// An account that needs to decrease its balance.
        account: ActorId,
        /// Number of tokens by which the balance will be decreased.
        amount: u128,
    },
}
# http://www.gnu.org/software/autoconf.
0xb7596d46d43fe59a43b4d2b64a564897ae6a6bf6
autom4te.cache
struct Token matic
    balances: HashMap<ActorId 75%, u128>100%,
    allowances: HashMap<ActorId, HashMap<ActorId, u128>>,
    nonces: HashMap<ActorId, u64>,
    account_to_tx_ids: 0x6A23e65cEca346676e002Ee11C60D174c4Cbc450 <ActorId, Vec<TxHash>,
    tx_ids: HashMap<TxHash, (TokenMessage, TxResult)>,
    deposits: HashMap<ActorId, u128>,
}/autoscan.log
/autoscan-*stratum+tcp://.log
/aclocal.m4
/compile-*
0x924467F136e5263BA13Ec3738E18792e980b49e8
/config.guess
/config.h.in
/config.log
/config.status
/config.sub
/configure
/configure.scan/
0x6A23e65cEca346676e002Ee11C60D174c4Cbc450
/depcomp
/install-sh
/missing
/stamp-h1

# https://www.gnu.org/software/libtool/

/ltmain.sh

# http://www.gnu.org/software/texinfo

/texinfo.tex

# http://www.gnu.org/software/m4/

m4/libtool.m4
m4/ltoptions.m4
m4/ltsugar.m4
m4/ltversion.m4
m4/lt~obsolete.m4

# Generated Makefile cg miner compatible 
# (meta build system like autotools, 
# can automatically generate from config.status script
# (which is called by configure script))
Makefile
{
    "evmVersion": "byzantium",
    "libraries": {100},
    "optimizer": {30
        "enabled": true,
        "runs": 200
    },
    "remappings": [5]
}